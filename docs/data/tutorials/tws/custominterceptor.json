{"identifier":{"url":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor","interfaceLanguage":"swift"},"hierarchy":{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents","modules":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Display-your-first-snippet","projects":[{"sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/LocalSnippet#Displaying-a-Snippet","kind":"task"}],"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/LocalSnippet"},{"sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet#Connect-with-the-TWS-portal","kind":"task"},{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet#Presenting-snippets","kind":"task"}],"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet"},{"sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/ManagerCreation#Manager-creation-and-registration","kind":"task"}],"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/ManagerCreation"},{"sections":[{"kind":"task","reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/MixAndMatch#Mix-Match"}],"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/MixAndMatch"},{"sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/Notifications#Integrating-TWSNotifications","kind":"task"}],"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/Notifications"}]},{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Customizing-TWSView","projects":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews","sections":[{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews#Custom-loading-and-error-views","kind":"task"}]},{"reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor","sections":[{"kind":"task","reference":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor#Custom-interceptors"}]}]}],"paths":[["doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Customizing-TWSView"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/tws\/custominterceptor"]}],"metadata":{"categoryPathComponent":"Tutorial-Table-of-Contents","category":"Learn to use the SDK","role":"project","title":"Intercepting URL requests"},"sections":[{"kind":"hero","chapter":"Customizing TWSView","title":"Intercepting URL requests","content":[{"type":"paragraph","inlineContent":[{"text":"Learn how to intercept desired URLs and use them in native flows","type":"text"}]}],"estimatedTimeInMinutes":5},{"kind":"tasks","tasks":[{"title":"Custom interceptors","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"TWSView has an ability to catch URL requests before they are loaded into the view. This gives you the capability to catch that URL and trigger a native flow."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Custom-interceptors","stepsSection":[{"code":"CustomInterceptor_00.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Lets take code from previous tutorial as base."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null},{"code":"CustomInterceptor_01.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"To use a custom interceptor we need to implement a class that conforms TWSViewInterceptor protocol."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null},{"code":"CustomInterceptor_02.swift","type":"step","content":[{"inlineContent":[{"text":"Imagine that https:\/\/www.myWebPage.com has two paths for which we want to implement a native screen instead of displaying them in TWSView.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"inlineContent":[{"text":"Those paths are \/helloWorld which displays hello World text and \/greetUser\/{username} which displays a greeting for a user.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"TWSIntercepted supports two types url and path. Url branch is triggered when the page is loaded into webView, those are typically MPA web pages."},{"type":"text","text":" "},{"type":"text","text":"Meanwhile path branch is triggered on SPA pages, because there are no full loads when navigating SPA web page."}],"type":"paragraph"}],"style":"note"}],"media":null},{"code":"CustomInterceptor_03.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add a representation of the current destination to the implementation.","type":"text"},{"text":" ","type":"text"},{"text":"Create an instance of your interceptor and bind it to TWSView.","type":"text"}]}],"runtimePreview":null,"caption":[],"media":null},{"code":"CustomInterceptor_04.swift","type":"step","content":[{"inlineContent":[{"text":"Now we add views for corresponding destinations and we are done.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Every time TWSView tries to load"},{"type":"text","text":" "},{"type":"codeVoice","code":"https:\/\/www.myWebPage.com\/helloWorld"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"codeVoice","code":"https:\/\/www.myWebPage.com\/greetUser\/{userName}"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"our custom flow will be triggered."}],"type":"paragraph"}],"media":null}]}]}],"kind":"project","references":{"doc://tws-ios.TWS/tutorials/Tutorial-Table-of-Contents":{"url":"\/tutorials\/tutorial-table-of-contents","type":"topic","abstract":[{"text":"Follow the tutorials to learn how to use the SDK for displaying snippets.","type":"text"}],"title":"Getting Started","kind":"overview","role":"overview","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents"},"CustomInterceptor_04.swift":{"content":["import Foundation","import SwiftUI","import TWS","","struct CustomView: View {","    let mySnippet = TWSSnippet(id: \"mySnippet\", target: URL(string: \"https:\/\/www.myWebPage.com\")!)","    @State var navigationInterceptor = NavigationInterceptor()","    ","    var body : some View {","        ZStack {","            TWSView(snippet: mySnippet)","                .twsBind(loadingView: { AnyView(LoadingView()) })","                .twsBind(preloadingView: { AnyView(LoadingView()) })","                .twsBind(errorView: { error in AnyView(ErrorView(error: error))})","                .twsBind(interceptor: NavigationInterceptor)","            switch navigationInterceptor.destination {","            case .helloWorld:","                Text(\"Hello World!\")","                    .frame(maxWidth: .infinity, maxHeight: .infinity)","                    .background(.white)","            case .greetUser(let username):","                Text(\"Hello, \\(username)!\")","                    .frame(maxWidth: .infinity, maxHeight: .infinity)","                    .background(.white)","            case .none:","                EmptyView()","            }","        }","    }","}","","class NavigationInterceptor: TWSViewInterceptor {","    var destination: Destination?","    ","    func handleIntercept(_ intercept: TWSIntercepted) -> Bool {","        switch intercept {","        case .url(let url):","            if url.absoluteString == \"https:\/\/www.myWebPage.com\/helloWorld\" {","                destination = .helloWorld","                return true","            } else if url.absoluteString.contains(\"https:\/\/www.myWebPage.com\/greetUser\/\") {","                destination = .greetUser(url.lastPathComponent)","                return true","            }","            return false","            ","        default:","            return false","        }","    }","}","","enum Destination {","    case helloWorld","    case greetUser(String)","}"],"highlights":[{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"syntax":"swift","type":"file","fileType":"swift","fileName":"CustomView.swift","identifier":"CustomInterceptor_04.swift"},"doc://tws-ios.TWS/tutorials/TWS/RemoteSnippet#Connect-with-the-TWS-portal":{"type":"section","title":"Connect with the TWS portal","url":"\/tutorials\/tws\/remotesnippet#Connect-with-the-TWS-portal","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet#Connect-with-the-TWS-portal","abstract":[{"text":"Learn how to set up a manager to handle the logic and functionality of your snippets, as well as how to seamlessly integrate them into your SwiftUI views.","type":"text"}]},"doc://tws-ios.TWS/tutorials/Tutorial-Table-of-Contents/Display-your-first-snippet":{"url":"\/tutorials\/tutorial-table-of-contents\/display-your-first-snippet","kind":"article","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Display-your-first-snippet","abstract":[],"role":"article","type":"topic","title":"Display your first snippet"},"CustomInterceptor_03.swift":{"content":["import Foundation","import SwiftUI","import TWS","","struct CustomView: View {","    let mySnippet = TWSSnippet(id: \"mySnippet\", target: URL(string: \"https:\/\/www.myWebPage.com\")!)","    @State var navigationInterceptor = NavigationInterceptor()","    ","    var body : some View {","        ZStack {","            TWSView(snippet: mySnippet)","                .twsBind(loadingView: { AnyView(LoadingView()) })","                .twsBind(preloadingView: { AnyView(LoadingView()) })","                .twsBind(errorView: { error in AnyView(ErrorView(error: error))})","                .twsBind(interceptor: NavigationInterceptor)","        }","    }","}","","class NavigationInterceptor: TWSViewInterceptor {","    var destination: Destination?","    ","    func handleIntercept(_ intercept: TWSIntercepted) -> Bool {","        switch intercept {","        case .url(let url):","            if url.absoluteString == \"https:\/\/www.myWebPage.com\/helloWorld\" {","                destination = .helloWorld","                return true","            } else if url.absoluteString.contains(\"https:\/\/www.myWebPage.com\/greetUser\/\") {","                destination = .greetUser(url.lastPathComponent)","                return true","            }","            return false","            ","        default:","            return false","        }","    }","}","","enum Destination {","    case helloWorld","    case greetUser(String)","}"],"highlights":[{"line":7},{"line":15},{"line":21},{"line":22},{"line":27},{"line":30},{"line":34},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44}],"syntax":"swift","type":"file","fileType":"swift","identifier":"CustomInterceptor_03.swift","fileName":"CustomView.swift"},"doc://tws-ios.TWS/tutorials/TWS/ManagerCreation":{"identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/ManagerCreation","type":"topic","kind":"project","url":"\/tutorials\/tws\/managercreation","abstract":[{"text":"Learn different ways of creating and managing TWSManager","type":"text"}],"title":"Creating and managing TWSManager","role":"project","estimatedTime":"5min"},"doc://tws-ios.TWS/tutorials/TWS/LocalSnippet":{"abstract":[{"type":"text","text":"Learn how to work with TWS snippets locally without connecting to our backend service. This tutorial will guide you through the steps to display a webpage snippet in your app, bypassing the backend, and focusing solely on rendering and showcasing the snippet content."}],"url":"\/tutorials\/tws\/localsnippet","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/LocalSnippet","kind":"project","type":"topic","estimatedTime":"2min","role":"project","title":"Display your first local snippet"},"doc://tws-ios.TWS/tutorials/Tutorial-Table-of-Contents/Customizing-TWSView":{"kind":"article","url":"\/tutorials\/tutorial-table-of-contents\/customizing-twsview","role":"article","abstract":[],"type":"topic","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/Tutorial-Table-of-Contents\/Customizing-TWSView","title":"Customizing TWSView"},"doc://tws-ios.TWS/tutorials/TWS/CustomInterceptor":{"abstract":[{"type":"text","text":"Learn how to intercept desired URLs and use them in native flows"}],"title":"Intercepting URL requests","estimatedTime":"5min","kind":"project","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor","url":"\/tutorials\/tws\/custominterceptor","type":"topic","role":"project"},"doc://tws-ios.TWS/tutorials/TWS/CustomizingViews#Custom-loading-and-error-views":{"kind":"section","type":"section","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews#Custom-loading-and-error-views","title":"Custom loading and error views","abstract":[{"type":"text","text":"Learn how to customize your view to fit your applications profile."},{"type":"text","text":" "},{"type":"text","text":"Customize loading, preloading and error views."}],"url":"\/tutorials\/tws\/customizingviews#Custom-loading-and-error-views","role":"pseudoSymbol"},"doc://tws-ios.TWS/tutorials/TWS/RemoteSnippet":{"type":"topic","kind":"project","url":"\/tutorials\/tws\/remotesnippet","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet","role":"project","title":"Display your first remote snippet","estimatedTime":"3min","abstract":[{"text":"Learn how to set up a manager to handle the logic and functionality of your snippets, as well as how to seamlessly integrate them into your SwiftUI views.","type":"text"}]},"doc://tws-ios.TWS/tutorials/TWS/RemoteSnippet#Presenting-snippets":{"kind":"section","abstract":[{"type":"text","text":"Learn how to set up a manager to handle the logic and functionality of your snippets, as well as how to seamlessly integrate them into your SwiftUI views."}],"url":"\/tutorials\/tws\/remotesnippet#Presenting-snippets","type":"section","title":"Presenting snippets","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/RemoteSnippet#Presenting-snippets","role":"pseudoSymbol"},"doc://tws-ios.TWS/tutorials/TWS/Notifications#Integrating-TWSNotifications":{"title":"Integrating TWSNotifications","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/Notifications#Integrating-TWSNotifications","role":"pseudoSymbol","abstract":[{"type":"text","text":"In this tutorial you will learn how to easily integrate TWSNotifications in your existing push notification code base."}],"type":"section","url":"\/tutorials\/tws\/notifications#Integrating-TWSNotifications","kind":"section"},"doc://tws-ios.TWS/tutorials/TWS/Notifications":{"type":"topic","estimatedTime":"3min","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/Notifications","role":"project","kind":"project","abstract":[{"text":"In this tutorial you will learn how to easily integrate TWSNotifications in your existing push notification code base.","type":"text"}],"url":"\/tutorials\/tws\/notifications","title":"Integrating TWSNotifications with your notifications"},"doc://tws-ios.TWS/tutorials/TWS/MixAndMatch":{"estimatedTime":"5min","title":"Combine remote and local snippets","role":"project","kind":"project","url":"\/tutorials\/tws\/mixandmatch","abstract":[{"type":"text","text":"Once you start mixing remote and local snippets, there are a few important considerations to keep in mind. Since the manager is injected into the environment, it can be accessed from anywhere in the app. However, this setup assumes that snippets are handled remotely. To successfully work with both remote and local snippets, you’ll need to follow specific rules and best practices."}],"type":"topic","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/MixAndMatch"},"CustomInterceptor_00.swift":{"identifier":"CustomInterceptor_00.swift","syntax":"swift","fileName":"CustomView.swift","content":["import Foundation","import SwiftUI","import TWS","","struct CustomView: View {","    let mySnippet = TWSSnippet(id: \"mySnippet\", target: URL(string: \"https:\/\/www.myWebPage.com\")!)","    ","    var body : some View {","        ZStack {","            TWSView(snippet: mySnippet)","                .twsBind(loadingView: { AnyView(LoadingView()) })","                .twsBind(preloadingView: { AnyView(LoadingView()) })","                .twsBind(errorView: { error in AnyView(ErrorView(error: error))})","        }","    }","}"],"highlights":[],"type":"file","fileType":"swift"},"CustomInterceptor_01.swift":{"content":["import Foundation","import SwiftUI","import TWS","","struct CustomView: View {","    let mySnippet = TWSSnippet(id: \"mySnippet\", target: URL(string: \"https:\/\/www.myWebPage.com\")!)","    ","    var body : some View {","        ZStack {","            TWSView(snippet: mySnippet)","                .twsBind(loadingView: { AnyView(LoadingView()) })","                .twsBind(preloadingView: { AnyView(LoadingView()) })","                .twsBind(errorView: { error in AnyView(ErrorView(error: error))})","        }","    }","}","","class NavigationInterceptor: TWSViewInterceptor {","    func handleIntercept(_ intercept: TWSIntercepted) -> Bool {","        ","    }","}"],"identifier":"CustomInterceptor_01.swift","fileName":"CustomView.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22}]},"doc://tws-ios.TWS/tutorials/TWS/LocalSnippet#Displaying-a-Snippet":{"abstract":[{"type":"text","text":"Learn how to work with TWS snippets locally without connecting to our backend service. This tutorial will guide you through the steps to display a webpage snippet in your app, bypassing the backend, and focusing solely on rendering and showcasing the snippet content."}],"identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/LocalSnippet#Displaying-a-Snippet","role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/tws\/localsnippet#Displaying-a-Snippet","title":"Displaying a Snippet"},"CustomInterceptor_02.swift":{"content":["import Foundation","import SwiftUI","import TWS","","struct CustomView: View {","    let mySnippet = TWSSnippet(id: \"mySnippet\", target: URL(string: \"https:\/\/www.myWebPage.com\")!)","    ","    var body : some View {","        ZStack {","            TWSView(snippet: mySnippet)","                .twsBind(loadingView: { AnyView(LoadingView()) })","                .twsBind(preloadingView: { AnyView(LoadingView()) })","                .twsBind(errorView: { error in AnyView(ErrorView(error: error))})","        }","    }","}","","class NavigationInterceptor: TWSViewInterceptor {","    func handleIntercept(_ intercept: TWSIntercepted) -> Bool {","        switch intercept {","        case .url(let url):","            if url.absoluteString == \"https:\/\/www.myWebPage.com\/helloWorld\" {","                return true","            } else if url.absoluteString.contains(\"https:\/\/www.myWebPage.com\/greetUser\/\") {","                return true","            }","            return false","                ","        default:","            return false","        }","    }","}"],"highlights":[{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"syntax":"swift","type":"file","fileType":"swift","fileName":"CustomView.swift","identifier":"CustomInterceptor_02.swift"},"doc://tws-ios.TWS/tutorials/TWS/MixAndMatch#Mix-Match":{"type":"section","abstract":[{"text":"Once you start mixing remote and local snippets, there are a few important considerations to keep in mind. Since the manager is injected into the environment, it can be accessed from anywhere in the app. However, this setup assumes that snippets are handled remotely. To successfully work with both remote and local snippets, you’ll need to follow specific rules and best practices.","type":"text"}],"url":"\/tutorials\/tws\/mixandmatch#Mix-Match","title":"Mix & Match","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/MixAndMatch#Mix-Match","kind":"section","role":"pseudoSymbol"},"doc://tws-ios.TWS/tutorials/TWS/CustomizingViews":{"url":"\/tutorials\/tws\/customizingviews","title":"Customize views to fit your application","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomizingViews","type":"topic","kind":"project","abstract":[{"type":"text","text":"Learn how to customize your view to fit your applications profile."},{"type":"text","text":" "},{"type":"text","text":"Customize loading, preloading and error views."}],"role":"project","estimatedTime":"3min"},"doc://tws-ios.TWS/tutorials/TWS/CustomInterceptor#Custom-interceptors":{"title":"Custom interceptors","type":"section","abstract":[{"type":"text","text":"Learn how to intercept desired URLs and use them in native flows"}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/tws\/custominterceptor#Custom-interceptors","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/CustomInterceptor#Custom-interceptors"},"doc://tws-ios.TWS/tutorials/TWS/ManagerCreation#Manager-creation-and-registration":{"type":"section","url":"\/tutorials\/tws\/managercreation#Manager-creation-and-registration","identifier":"doc:\/\/tws-ios.TWS\/tutorials\/TWS\/ManagerCreation#Manager-creation-and-registration","role":"pseudoSymbol","kind":"section","title":"Manager creation and registration","abstract":[{"text":"Learn different ways of creating and managing TWSManager","type":"text"}]}}}